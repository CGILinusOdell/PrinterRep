import { r as registerInstance, h } from './index-bff35170.js';

const iconCss = ":host,:host *,:host *::before,:host *::after{-webkit-box-sizing:border-box;box-sizing:border-box}:host{display:inline-block;vertical-align:middle;line-height:0}:host svg{height:1em;width:1em;fill:currentColor}";

const Icon = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.name = 'scania-truck';
  }
  async loadIcon() {
    try {
      // dynamic import icon from @scania/icons
      this.icon = await import(`@scania/icons/dist/${this.name}.js`);
    }
    catch (err) {
      this.name = 'scania-truck'; // If icon not found, display a truck icon
    }
  }
  componentWillLoad() {
    this.loadIcon();
  }
  generateViewBox() {
    // viewbox = minX minY width height
    let viewbox = '0 0 0 0';
    if (this.icon !== undefined) {
      // If icons has transform: translate attributes, add it to the viewbox.
      viewbox = `${this.icon.default.hasOwnProperty('transform')
        ? this.getTransformViewBox()
        : '0 0'} ${this.icon.default.width} ${this.icon.default.height}`;
    }
    return viewbox;
  }
  getTransformViewBox() {
    const minX = parseFloat(this.icon.default.transform[0]) * -1;
    const minY = parseFloat(this.icon.default.transform[1]) * -1;
    return `${minX} ${minY}`;
  }
  render() {
    return [
      h("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: this.generateViewBox() }, h("path", { fill: "currentColor", d: this.icon ? this.icon.default.definition : '' })),
    ];
  }
  static get watchers() { return {
    "name": ["loadIcon"]
  }; }
};
Icon.style = iconCss;

export { Icon as sdds_icon };
