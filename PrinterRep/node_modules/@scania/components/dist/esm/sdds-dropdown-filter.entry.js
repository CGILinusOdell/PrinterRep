import { r as registerInstance, h, H as Host } from './index-bff35170.js';

const DropdownFilter = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.dataOptions = [];
    this.filteredContent = [];
    this.searchTerm = '';
    /** Placeholder text for dropdown with no selected item */
    this.placeholder = '';
    /** `large` (default), `small`, `medium` */
    this.size = 'large';
    /** Set to true to make the width following the label text length */
    this.inline = false;
    /** Position of label: `no-label` (default), `inside`, `outside` */
    this.labelPosition = 'no-label';
    /** Support `error` state */
    this.state = 'default';
    /** Add helper text in the bottom of dropdown */
    this.helper = '';
    this.selectedLabel = 'no-selected';
    this.selectedValue = 'no-selected';
  }
  componentWillLoad() {
    this.parseData(this.data);
    if (this.defaultOption) {
      this.selectedOptionState = this.defaultOption;
    }
  }
  parseData(newValue) {
    if (newValue)
      this.dataOptions = JSON.parse(newValue);
    this.filteredContent = this.dataOptions;
  }
  updateOptionsContent(event) {
    this.searchTerm = event.detail;
    this.findData();
  }
  selectOptionHandler(event) {
    this.selectedOptionState = event.detail.value;
    this.selectedLabel = event.detail.label;
    this.selectedValue = event.detail.value;
    // Reset list when search is done and user have selected one option
    // To match with animation time for option list to fadeout first
    setTimeout(() => {
      this.filteredContent = this.dataOptions;
    }, 200);
  }
  findData() {
    const searchAsRegEx = new RegExp(this.searchTerm, 'gmi');
    this.filteredContent = this.dataOptions.filter((option) => {
      if (option.label) {
        const listItem = option.label.toLowerCase();
        let searchResultList = listItem.match(searchAsRegEx);
        if (searchResultList) {
          return searchResultList;
        }
        this.selectedOptionState = null;
        this.selectedLabel = 'no-result';
        this.selectedValue = 'no-result';
      }
    });
  }
  setOptionsContent() {
    const newList = this.filteredContent.map((obj) => (h("sdds-dropdown-option", { tabindex: "0", value: obj.value, class: `${this.selectedOptionState === obj.value ? 'selected' : ''}` }, obj.label)));
    if (newList.length > 0) {
      return newList;
    }
    return (h("sdds-dropdown-option", { tabindex: "-1", value: "no-result", class: "sdds-option--no-result" }, "No result"));
  }
  render() {
    return (h(Host, { "selected-value": this.selectedValue, "selected-text": this.selectedLabel }, h("sdds-dropdown", { size: this.size, label: this.label, disabled: this.disabled, labelPosition: this.labelPosition, helper: this.helper, state: this.state, placeholder: this.placeholder, defaultOption: this.defaultOption, selectedOption: this.selectedOption, type: "filter" }, this.setOptionsContent())));
  }
  static get watchers() { return {
    "data": ["parseData"]
  }; }
};

export { DropdownFilter as sdds_dropdown_filter };
