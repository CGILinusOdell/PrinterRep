import { r as registerInstance, h } from './index-bff35170.js';

const badgesCss = ":host{display:block}.sdds-badges{height:var(--sdds-badges-default-height);line-height:var(--sdds-badges-default-height);width:var(--sdds-badges-default-height);border-radius:var(--sdds-badges-border-radius);background-color:var(--sdds-badges-bg-color);text-align:center}.sdds-badges.sdds-badges-pill{display:inline-block;width:unset;padding-left:var(--sdds-badges-pill-padding);padding-right:var(--sdds-badges-pill-padding)}.sdds-badges.sdds-badges-sm{height:var(--sdds-badges-sm-height);width:var(--sdds-badges-sm-width);line-height:var(--sdds-badges-sm-height);text-align:center}.sdds-badges-text{font-family:var(--sdds-font-family-semi-condensed-bold);font-size:var(--sdds-badges-size-text);color:var(--sdds-badges-color-text);font-weight:bold}";

const SddsBadges = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.value = '';
    this.shape = '';
    this.size = 'sm';
    this.text = '';
  }
  watchValue() {
    // parse the value to number
    const valueAsNumber = parseInt(this.value);
    if (!isNaN(valueAsNumber)) {
      this.shape = valueAsNumber.toString().length >= 2 ? 'pill' : '';
      this.size = '';
      this.text =
        valueAsNumber.toString().length >= 3 ? '99+' : valueAsNumber.toString();
    }
    else {
      this.value !== ''
        ? console.warn('The provided value is either empty or string, please provide value as number.')
        : '';
    }
  }
  componentWillLoad() {
    this.watchValue();
  }
  render() {
    return (h("div", { class: `sdds-badges sdds-badges-${this.size} sdds-badges-${this.shape}` }, h("div", { class: "sdds-badges-text" }, this.text)));
  }
  static get watchers() { return {
    "value": ["watchValue"]
  }; }
};
SddsBadges.style = badgesCss;

export { SddsBadges as sdds_badges };
