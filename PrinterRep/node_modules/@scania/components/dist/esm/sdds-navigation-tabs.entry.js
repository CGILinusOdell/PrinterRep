import { r as registerInstance, h, H as Host, c as getElement } from './index-bff35170.js';

const navigationTabsCss = ".sdds-navigation-tabs{background-color:var(--sdds-white);position:relative;display:-ms-flexbox;display:flex}.sdds-navigation-tabs::after{content:\" \";display:block;border-bottom:1px solid var(--sdds-grey-300);left:0;right:0;bottom:0;position:absolute}.sdds-navigation-tabs-wrapper{display:-ms-flexbox;display:flex;-ms-flex-wrap:nowrap;flex-wrap:nowrap;width:100%;overflow-x:scroll;scrollbar-width:none}.sdds-navigation-tabs-wrapper::-webkit-scrollbar{display:none}.sdds-navigation-tabs--forward{cursor:pointer;width:48px;height:100%;border:0;position:absolute;right:0;top:0;background-color:var(--sdds-grey-50);display:-ms-flexbox;display:flex;-ms-flex-pack:center;justify-content:center;-ms-flex-align:center;align-items:center;opacity:0;pointer-events:none}.sdds-navigation-tabs--forward__show{opacity:1;pointer-events:all}.sdds-navigation-tabs--forward:hover{background-color:var(--sdds-grey-300)}.sdds-navigation-tabs--forward:active{background-color:var(--sdds-grey-400)}.sdds-navigation-tabs--back{cursor:pointer;width:48px;height:100%;border:0;position:absolute;left:0;top:0;background-color:var(--sdds-grey-50);display:-ms-flexbox;display:flex;-ms-flex-pack:center;justify-content:center;-ms-flex-align:center;align-items:center;opacity:0;pointer-events:none}.sdds-navigation-tabs--back__show{opacity:1;pointer-events:all}.sdds-navigation-tabs--back:hover{background-color:var(--sdds-grey-300)}.sdds-navigation-tabs--back:active{background-color:var(--sdds-grey-400)}.sdds-navigation-tabs--tab{font-family:\"Scania Sans Semi Condensed\", Arial, Helvetica, sans-serif;font-weight:bold;font-size:3.5rem;line-height:4rem;letter-spacing:-0.01em;color:rgba(0, 21, 51, 0.6);padding:26px 0;margin-right:32px;text-decoration:none;display:block;position:relative;-webkit-transition:color 0.15s ease-in-out;transition:color 0.15s ease-in-out;white-space:nowrap;}.sdds-navigation-tabs--tab:first-child{margin-left:32px}.sdds-navigation-tabs--tab:last-child{margin-right:32px}.sdds-navigation-tabs--tab::after{content:\" \";position:absolute;bottom:0;right:0;left:0;margin-left:auto;width:0;margin-right:auto;height:2px;background-color:var(--sdds-grey-300);-webkit-transition:width 0.15s ease-in-out;transition:width 0.15s ease-in-out;z-index:10}.sdds-navigation-tabs--tab:hover{color:var(--sdds-blue-958)}.sdds-navigation-tabs--tab:hover::after{width:100%}.sdds-navigation-tabs--tab:focus{outline:none;color:var(--sdds-grey-958)}.sdds-navigation-tabs--tab:focus::before{content:\" \";border:1px solid var(--sdds-blue-400);position:absolute;top:20px;bottom:22px;left:-8px;right:-8px}.sdds-navigation-tabs--tab:focus::after{width:0}.sdds-navigation-tabs--tab__active{color:var(--sdds-blue-958)}.sdds-navigation-tabs--tab__active::after{width:100%;background-color:var(--sdds-blue-400)}.sdds-navigation-tabs--tab__active:focus::after{width:100%}.sdds-navigation-tabs--tab__disabled{color:rgba(0, 21, 51, 0.6);pointer-events:none}";

const NavigationTabs = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.tabs = []; // array with metadata for slotted children
    this.showLeftScroll = false;
    this.showRightScroll = false;
    this.navWrapperElement = null; // reference to container with nav buttons
    this.componentWidth = 0; // visible width of this component
    this.buttonsWidth = 0; // total width of all nav items combined
    this.scrollWidth = 0; // total amount that is possible to scroll in the nav wrapper
    this.buttonWidth = 0; // current calculated width of the largest nav button
  }
  componentDidLoad() {
    const resizeObserver = new ResizeObserver((entries) => {
      for (let entry of entries) {
        const componentWidth = entry.contentRect.width;
        let buttonsWidth = 0;
        const navButtons = Array.from(this.host.children);
        navButtons.forEach((navButton) => {
          const style = window.getComputedStyle(navButton);
          buttonsWidth +=
            navButton.clientWidth +
              parseFloat(style.marginLeft) +
              parseFloat(style.marginRight);
          navButton.classList.add('sdds-navigation-tabs--tab');
        });
        this.componentWidth = componentWidth;
        this.buttonsWidth = buttonsWidth;
        this.scrollWidth = buttonsWidth - componentWidth;
        if (this.buttonsWidth > this.componentWidth) {
          this._evaluateScrollButtons();
        }
        else {
          this.showLeftScroll = false;
          this.showRightScroll = false;
        }
      }
    });
    resizeObserver.observe(this.navWrapperElement);
    this._calculateButtonWidth();
  }
  _calculateButtonWidth() {
    let best = 0;
    const navButtons = Array.from(this.host.children);
    navButtons.forEach((navButton) => {
      const style = window.getComputedStyle(navButton);
      const width = navButton.clientWidth +
        parseFloat(style.marginLeft) +
        parseFloat(style.marginRight);
      if (width > best) {
        best = width;
      }
    });
    this.buttonWidth = best;
  }
  _scrollRight() {
    const scroll = this.navWrapperElement.scrollLeft;
    this.navWrapperElement.scrollLeft = scroll + this.buttonWidth;
    this._evaluateScrollButtons();
  }
  _scrollLeft() {
    const scroll = this.navWrapperElement.scrollLeft;
    this.navWrapperElement.scrollLeft = scroll - this.buttonWidth;
    this._evaluateScrollButtons();
  }
  _evaluateScrollButtons() {
    const scroll = this.navWrapperElement.scrollLeft;
    if (scroll >= this.scrollWidth) {
      this.showRightScroll = false;
    }
    else {
      this.showRightScroll = true;
    }
    if (scroll <= 0) {
      this.showLeftScroll = false;
    }
    else {
      this.showLeftScroll = true;
    }
  }
  render() {
    return (h(Host, null, h("div", { class: "sdds-navigation-tabs" }, h("div", { class: "sdds-navigation-tabs-wrapper", ref: (el) => (this.navWrapperElement = el) }, h("slot", null)), h("div", { class: "sdds-navigation-tabs-navigation" }, h("button", { class: 'sdds-navigation-tabs--forward ' +
        (this.showRightScroll
          ? 'sdds-navigation-tabs--forward__show'
          : ''), onClick: () => this._scrollRight() }, h("svg", { width: "20", height: "20", viewBox: "0 0 20 20", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, h("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M6.1147 17.3291C5.87062 17.0851 5.87062 16.6893 6.1147 16.4453L12.2948 10.2652C12.4412 10.1187 12.4412 9.8813 12.2948 9.73485L6.1147 3.55476C5.87062 3.31068 5.87062 2.91496 6.1147 2.67088C6.35878 2.4268 6.75451 2.4268 6.99858 2.67088L13.1787 8.85097C13.8133 9.48557 13.8133 10.5145 13.1787 11.1491L6.99858 17.3291C6.75451 17.5732 6.35878 17.5732 6.1147 17.3291Z", fill: "#0D0F13" }))), h("button", { class: 'sdds-navigation-tabs--back ' +
        (this.showLeftScroll ? 'sdds-navigation-tabs--back__show' : ''), onClick: () => this._scrollLeft() }, h("svg", { width: "20", height: "20", viewBox: "0 0 20 20", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, h("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M13.8853 2.67085C14.1294 2.91493 14.1294 3.31066 13.8853 3.55473L7.70522 9.73482C7.55878 9.88127 7.55878 10.1187 7.70522 10.2652L13.8853 16.4452C14.1294 16.6893 14.1294 17.085 13.8853 17.3291C13.6412 17.5732 13.2455 17.5732 13.0014 17.3291L6.82134 11.149C6.18674 10.5144 6.18674 9.48554 6.82134 8.85094L13.0014 2.67085C13.2455 2.42677 13.6412 2.42677 13.8853 2.67085Z", fill: "#0D0F13" })))))));
  }
  get host() { return getElement(this); }
};
NavigationTabs.style = navigationTabsCss;

export { NavigationTabs as sdds_navigation_tabs };
