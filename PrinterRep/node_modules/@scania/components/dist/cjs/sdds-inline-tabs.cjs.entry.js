'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-ae24d128.js');

const inlineTabsCss = ":host{outline:0 !important}.sdds-inline-tabs{overflow:hidden;outline:0}.sdds-inline-tabs-header{position:relative}.sdds-inline-tabs-main{background-color:var(--sdds-grey-50);padding:24px 24px 48px}.sdds-inline-tabs-wrapper{display:-ms-flexbox;display:flex;overflow-x:scroll;scrollbar-width:none}.sdds-inline-tabs-wrapper::-webkit-scrollbar{display:none}.sdds-inline-tabs--forward{cursor:pointer;width:48px;height:100%;border:0;position:absolute;right:0;top:0;background-color:var(--sdds-grey-200);display:-ms-flexbox;display:flex;-ms-flex-pack:center;justify-content:center;-ms-flex-align:center;align-items:center;opacity:0;pointer-events:none}.sdds-inline-tabs--forward__show{opacity:1;pointer-events:all}.sdds-inline-tabs--forward:hover{background-color:var(--sdds-grey-300)}.sdds-inline-tabs--forward:active{background-color:var(--sdds-grey-400)}.sdds-inline-tabs--back{cursor:pointer;width:48px;height:100%;border:0;position:absolute;left:0;top:0;background-color:var(--sdds-grey-200);display:-ms-flexbox;display:flex;-ms-flex-pack:center;justify-content:center;-ms-flex-align:center;align-items:center;opacity:0;pointer-events:none}.sdds-inline-tabs--back__show{opacity:1;pointer-events:all}.sdds-inline-tabs--back:hover{background-color:var(--sdds-grey-300)}.sdds-inline-tabs--back:active{background-color:var(--sdds-grey-400)}.sdds-inline-tabs--tab{font-family:\"Scania Sans Semi Condensed\", Arial, Helvetica, sans-serif;font-weight:bold;font-size:3.5rem;line-height:4rem;letter-spacing:-0.01em;cursor:pointer;border:0;color:rgba(0, 21, 51, 0.6);background-color:var(--sdds-grey-100);padding:16px;min-width:142px;text-decoration:none;display:block;position:relative;-webkit-transition:color 0.15s ease-in-out, background-color 0.15s ease-in-out;transition:color 0.15s ease-in-out, background-color 0.15s ease-in-out;white-space:nowrap;-ms-flex-negative:0;flex-shrink:0;text-align:left;outline:none}.sdds-inline-tabs--tab:not(:last-child){border-right:1px solid var(--sdds-grey-300)}.sdds-inline-tabs--tab::after{content:\" \";position:absolute;top:0;right:0;left:0;margin-left:auto;width:0;margin-right:auto;height:2px;background-color:var(--sdds-grey-300);-webkit-transition:width 0.15s ease-in-out;transition:width 0.15s ease-in-out}.sdds-inline-tabs--tab:hover{background-color:var(--sdds-grey-200);color:var(--sdds-blue-958)}.sdds-inline-tabs--tab:focus::before{content:\" \";position:absolute;left:0;right:0;top:0;bottom:0;display:block;border:1px solid var(--sdds-blue-400)}.sdds-inline-tabs--tab__active{background-color:var(--sdds-grey-50);color:var(--sdds-blue-958);cursor:initial;border-right:1px solid transparent !important}.sdds-inline-tabs--tab__active:hover{background-color:var(--sdds-grey-50)}.sdds-inline-tabs--tab__active::after{width:calc(100% + 2px);left:-1px;background-color:var(--sdds-blue-400)}.sdds-inline-tabs--tab__active::before{content:\" \";background-color:var(--sdds-grey-50);width:1px;top:0;bottom:0;left:-1px;display:block;position:absolute}.sdds-inline-tabs--tab__active:focus::before{right:-1px;left:-1px;width:auto;background-color:transparent}.sdds-inline-tabs--tab__active:first-child:focus::before{left:0}.sdds-inline-tabs--tab:disabled,.sdds-inline-tabs--tab__disabled{cursor:initial;color:rgba(0, 21, 51, 0.38);pointer-events:none}.sdds-inline-tabs-onwhite .sdds-inline-tabs--tab__active{background-color:var(--sdds-grey-50)}.sdds-inline-tabs-onwhite .sdds-inline-tabs-main{background-color:var(--sdds-grey-50)}.sdds-inline-tabs-ongrey50 .sdds-inline-tabs--tab__active{background-color:var(--sdds-white)}.sdds-inline-tabs-ongrey50 .sdds-inline-tabs-main{background-color:var(--sdds-white)}";

const InlineTabs = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.defaultTab = ''; // either use this (default-tab="...") or read attribute "default" from one of the slotted children.
    this.autoHeight = false; // different height settings. right now only supports "auto", otherwise ignored
    this.tabs = []; // array with metadata for slotted children
    this.buttonWidth = 0; // current calculated width of each nav button (calculated from the largest one)
    this.tabHeight = 0; // current calculated tab height (calculated from the one with the most height)
    this.showLeftScroll = false;
    this.showRightScroll = false;
    this.startingTab = null; // name of the tab to show by default (infered from either "default-tab"-prop (on component) or "default"-prop (on a slotted child)
    this.navWrapperElement = null; // reference to container with nav buttons
    this.tabWrapperElement = null; // reference to container with slotted children
    this.componentWidth = 0; // visible width of this component
    this.buttonsWidth = 0; // total width of all nav items combined
    this.scrollWidth = 0; // total amount that is possible to scroll in the nav wrapper
    this.useAutoHeight = false; // set height for slotted children or not
  }
  // public method for switching to a tab programatically
  async showTab(key) {
    this.switchToTab(key);
  }
  _generateKeyFromName(name) {
    return name
      .replace(/\s/g, '-')
      .replace(/[^a-z0-9-]/gi, '')
      .toLowerCase();
  }
  componentWillLoad() {
    this._initComponent();
  }
  _initComponent(createInitialState = true) {
    this.tabs = [];
    if (this.autoHeight) {
      this.useAutoHeight = true;
    }
    Array.from(this.host.children).map((item, index) => {
      let name = item.getAttribute('name') || 'Tab ' + (index + 1);
      let key = item.getAttribute('tab-key');
      if (!key) {
        key = this._generateKeyFromName(name);
      }
      if (item.getAttribute('default') !== null) {
        this.startingTab = key;
      }
      let disabled = false;
      if (item.getAttribute('disabled') !== null) {
        disabled = true;
      }
      this.tabs.push({
        name: name,
        key: key,
        element: item,
        disabled: disabled,
        visible: true,
        initialDisplay: window.getComputedStyle(item).display,
      });
    });
    createInitialState && this._setInitialState();
    this.tabs = Array.from(this.tabs);
  }
  _calculateButtonWidth() {
    const navButtons = this.navWrapperElement.querySelectorAll('button.sdds-inline-tabs--tab');
    let best = 0;
    Array.from(navButtons).forEach((navButton) => {
      const oldStyle = navButton.style.width;
      navButton.style.width = '';
      const width = navButton.clientWidth;
      navButton.style.width = oldStyle;
      if (navButton.clientWidth > best) {
        best = width;
      }
    });
    this.buttonWidth = best;
  }
  _calculateTabHeight() {
    let best = 0;
    this.tabs.forEach((tab) => {
      const oldStyle = tab.element.style.display;
      tab.element.style.display = '';
      const height = tab.element.clientHeight;
      tab.element.style.display = oldStyle;
      if (height > best) {
        best = height;
      }
    });
    this.tabHeight = best;
  }
  componentDidLoad() {
    const mutationObserver = new MutationObserver(( /*mutations, observer*/) => {
      const visibleTab = this.tabs.find((tab) => tab.visible);
      this._initComponent(false);
      this._calculateTabHeight();
      this._calculateButtonWidth();
      visibleTab && this.switchToTab(visibleTab.key);
    });
    const resizeObserver = new ResizeObserver((entries) => {
      for (let entry of entries) {
        const componentWidth = entry.contentRect.width;
        let buttonsWidth = 0;
        const navButtons = entry.target.querySelectorAll('button.sdds-inline-tabs--tab');
        Array.from(navButtons).forEach((navButton) => {
          buttonsWidth += navButton.clientWidth;
        });
        this.componentWidth = componentWidth;
        this.buttonsWidth = buttonsWidth;
        this.scrollWidth = buttonsWidth - componentWidth;
        if (this.buttonsWidth > this.componentWidth) {
          this._evaluateScrollButtons();
        }
        else {
          this.showLeftScroll = false;
          this.showRightScroll = false;
        }
        this._calculateTabHeight();
      }
    });
    mutationObserver.observe(this.host, {
      childList: true,
      attributes: true,
    });
    resizeObserver.observe(this.navWrapperElement);
    this._calculateButtonWidth();
    this._calculateTabHeight();
  }
  _setInitialState() {
    if (this.defaultTab) {
      this.startingTab = this.defaultTab;
    }
    this.tabs.map((tab, index) => {
      if (this.startingTab) {
        if (tab.key != this.startingTab) {
          this._hideTab(tab);
        }
      }
      else {
        if (index > 0) {
          this._hideTab(tab);
        }
      }
    });
  }
  _showTab(tab) {
    tab.element.style.display = '';
    tab.visible = true;
  }
  _hideTab(tab) {
    tab.element.style.display = 'none';
    tab.visible = false;
  }
  switchToTab(key) {
    this.tabs.map((tab) => {
      if (tab.key == key) {
        this._showTab(tab);
      }
      else {
        this._hideTab(tab);
      }
    });
    this.tabs = Array.from(this.tabs);
  }
  _scrollRight() {
    const scroll = this.navWrapperElement.scrollLeft;
    this.navWrapperElement.scrollLeft = scroll + this.buttonWidth;
    this._evaluateScrollButtons();
  }
  _scrollLeft() {
    const scroll = this.navWrapperElement.scrollLeft;
    this.navWrapperElement.scrollLeft = scroll - this.buttonWidth;
    this._evaluateScrollButtons();
  }
  _evaluateScrollButtons() {
    const scroll = this.navWrapperElement.scrollLeft;
    if (scroll >= this.scrollWidth) {
      this.showRightScroll = false;
    }
    else {
      this.showRightScroll = true;
    }
    if (scroll <= 0) {
      this.showLeftScroll = false;
    }
    else {
      this.showLeftScroll = true;
    }
  }
  render() {
    let heightStyle = {};
    if (this.useAutoHeight) {
      heightStyle['height'] = this.tabHeight + 'px';
    }
    return (index.h(index.Host, null, index.h("div", { class: "sdds-inline-tabs sdds-inline-tabs-onwhite" }, index.h("nav", { class: "sdds-inline-tabs-header" }, index.h("div", { ref: (el) => (this.navWrapperElement = el), class: "sdds-inline-tabs-wrapper" }, this.tabs.map((tab) => {
      return (index.h("button", { style: { width: this.buttonWidth + 'px' }, disabled: tab.disabled, class: 'sdds-inline-tabs--tab ' +
          (tab.visible ? 'sdds-inline-tabs--tab__active' : ''), onClick: () => this.switchToTab(tab.key) }, index.h("span", null, tab.name)));
    })), index.h("div", { class: "sdds-inline-tabs-header-navigation" }, index.h("button", { class: 'sdds-inline-tabs--forward ' +
        (this.showRightScroll ? 'sdds-inline-tabs--back__show' : ''), onClick: () => this._scrollRight() }, index.h("svg", { width: "20", height: "20", viewBox: "0 0 20 20", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, index.h("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M6.1147 17.3291C5.87062 17.0851 5.87062 16.6893 6.1147 16.4453L12.2948 10.2652C12.4412 10.1187 12.4412 9.8813 12.2948 9.73485L6.1147 3.55476C5.87062 3.31068 5.87062 2.91496 6.1147 2.67088C6.35878 2.4268 6.75451 2.4268 6.99858 2.67088L13.1787 8.85097C13.8133 9.48557 13.8133 10.5145 13.1787 11.1491L6.99858 17.3291C6.75451 17.5732 6.35878 17.5732 6.1147 17.3291Z", fill: "#0D0F13" }))), index.h("button", { class: 'sdds-inline-tabs--back ' +
        (this.showLeftScroll ? 'sdds-inline-tabs--back__show' : ''), onClick: () => this._scrollLeft() }, index.h("svg", { width: "20", height: "20", viewBox: "0 0 20 20", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, index.h("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M13.8853 2.67085C14.1294 2.91493 14.1294 3.31066 13.8853 3.55473L7.70522 9.73482C7.55878 9.88127 7.55878 10.1187 7.70522 10.2652L13.8853 16.4452C14.1294 16.6893 14.1294 17.085 13.8853 17.3291C13.6412 17.5732 13.2455 17.5732 13.0014 17.3291L6.82134 11.149C6.18674 10.5144 6.18674 9.48554 6.82134 8.85094L13.0014 2.67085C13.2455 2.42677 13.6412 2.42677 13.8853 2.67085Z", fill: "#0D0F13" }))))), index.h("div", { ref: (el) => (this.tabWrapperElement = el), class: "sdds-inline-tabs-main", style: heightStyle }, index.h("slot", null)))));
  }
  get host() { return index.getElement(this); }
};
InlineTabs.style = inlineTabsCss;

exports.sdds_inline_tabs = InlineTabs;
