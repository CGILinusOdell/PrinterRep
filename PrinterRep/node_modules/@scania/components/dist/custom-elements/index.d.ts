/* SddsComponents custom elements bundle */

import type { Components, JSX } from "../types/components";

interface CCodeSample extends Components.CCodeSample, HTMLElement {}
export const CCodeSample: {
  prototype: CCodeSample;
  new (): CCodeSample;
};

interface SddsAccordion extends Components.SddsAccordion, HTMLElement {}
export const SddsAccordion: {
  prototype: SddsAccordion;
  new (): SddsAccordion;
};

interface SddsAccordionItem extends Components.SddsAccordionItem, HTMLElement {}
export const SddsAccordionItem: {
  prototype: SddsAccordionItem;
  new (): SddsAccordionItem;
};

interface SddsBadges extends Components.SddsBadges, HTMLElement {}
export const SddsBadges: {
  prototype: SddsBadges;
  new (): SddsBadges;
};

interface SddsBodyCell extends Components.SddsBodyCell, HTMLElement {}
export const SddsBodyCell: {
  prototype: SddsBodyCell;
  new (): SddsBodyCell;
};

interface SddsButton extends Components.SddsButton, HTMLElement {}
export const SddsButton: {
  prototype: SddsButton;
  new (): SddsButton;
};

interface SddsCard extends Components.SddsCard, HTMLElement {}
export const SddsCard: {
  prototype: SddsCard;
  new (): SddsCard;
};

interface SddsContinousvalueSlider extends Components.SddsContinousvalueSlider, HTMLElement {}
export const SddsContinousvalueSlider: {
  prototype: SddsContinousvalueSlider;
  new (): SddsContinousvalueSlider;
};

interface SddsDatetime extends Components.SddsDatetime, HTMLElement {}
export const SddsDatetime: {
  prototype: SddsDatetime;
  new (): SddsDatetime;
};

interface SddsDropdown extends Components.SddsDropdown, HTMLElement {}
export const SddsDropdown: {
  prototype: SddsDropdown;
  new (): SddsDropdown;
};

interface SddsDropdownFilter extends Components.SddsDropdownFilter, HTMLElement {}
export const SddsDropdownFilter: {
  prototype: SddsDropdownFilter;
  new (): SddsDropdownFilter;
};

interface SddsDropdownOption extends Components.SddsDropdownOption, HTMLElement {}
export const SddsDropdownOption: {
  prototype: SddsDropdownOption;
  new (): SddsDropdownOption;
};

interface SddsDualPointSlider extends Components.SddsDualPointSlider, HTMLElement {}
export const SddsDualPointSlider: {
  prototype: SddsDualPointSlider;
  new (): SddsDualPointSlider;
};

interface SddsHeaderCell extends Components.SddsHeaderCell, HTMLElement {}
export const SddsHeaderCell: {
  prototype: SddsHeaderCell;
  new (): SddsHeaderCell;
};

interface SddsIcon extends Components.SddsIcon, HTMLElement {}
export const SddsIcon: {
  prototype: SddsIcon;
  new (): SddsIcon;
};

interface SddsInlineTabs extends Components.SddsInlineTabs, HTMLElement {}
export const SddsInlineTabs: {
  prototype: SddsInlineTabs;
  new (): SddsInlineTabs;
};

interface SddsInlineTabsFullbleed extends Components.SddsInlineTabsFullbleed, HTMLElement {}
export const SddsInlineTabsFullbleed: {
  prototype: SddsInlineTabsFullbleed;
  new (): SddsInlineTabsFullbleed;
};

interface SddsModal extends Components.SddsModal, HTMLElement {}
export const SddsModal: {
  prototype: SddsModal;
  new (): SddsModal;
};

interface SddsNavigationTabs extends Components.SddsNavigationTabs, HTMLElement {}
export const SddsNavigationTabs: {
  prototype: SddsNavigationTabs;
  new (): SddsNavigationTabs;
};

interface SddsSlider extends Components.SddsSlider, HTMLElement {}
export const SddsSlider: {
  prototype: SddsSlider;
  new (): SddsSlider;
};

interface SddsSpinner extends Components.SddsSpinner, HTMLElement {}
export const SddsSpinner: {
  prototype: SddsSpinner;
  new (): SddsSpinner;
};

interface SddsTable extends Components.SddsTable, HTMLElement {}
export const SddsTable: {
  prototype: SddsTable;
  new (): SddsTable;
};

interface SddsTextarea extends Components.SddsTextarea, HTMLElement {}
export const SddsTextarea: {
  prototype: SddsTextarea;
  new (): SddsTextarea;
};

interface SddsTextfield extends Components.SddsTextfield, HTMLElement {}
export const SddsTextfield: {
  prototype: SddsTextfield;
  new (): SddsTextfield;
};

interface SddsTheme extends Components.SddsTheme, HTMLElement {}
export const SddsTheme: {
  prototype: SddsTheme;
  new (): SddsTheme;
};

interface SddsTooltip extends Components.SddsTooltip, HTMLElement {}
export const SddsTooltip: {
  prototype: SddsTooltip;
  new (): SddsTooltip;
};

/**
 * Utility to define all custom elements within this package using the tag name provided in the component's source. 
 * When defining each custom element, it will also check it's safe to define by:
 *
 * 1. Ensuring the "customElements" registry is available in the global context (window).
 * 2. The component tag name is not already defined.
 *
 * Use the standard [customElements.define()](https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry/define) 
 * method instead to define custom elements individually, or to provide a different tag name.
 */
export declare const defineCustomElements: (opts?: any) => void;

/**
 * Used to manually set the base path where assets can be found.
 * If the script is used as "module", it's recommended to use "import.meta.url",
 * such as "setAssetPath(import.meta.url)". Other options include
 * "setAssetPath(document.currentScript.src)", or using a bundler's replace plugin to
 * dynamically set the path at build time, such as "setAssetPath(process.env.ASSET_PATH)".
 * But do note that this configuration depends on how your script is bundled, or lack of
 * bunding, and where your assets can be loaded from. Additionally custom bundling
 * will have to ensure the static assets are copied to its build directory.
 */
export declare const setAssetPath: (path: string) => void;

export interface SetPlatformOptions {
  raf?: (c: FrameRequestCallback) => number;
  ael?: (el: EventTarget, eventName: string, listener: EventListenerOrEventListenerObject, options: boolean | AddEventListenerOptions) => void;
  rel?: (el: EventTarget, eventName: string, listener: EventListenerOrEventListenerObject, options: boolean | AddEventListenerOptions) => void;
  ce?: (eventName: string, opts?: any) => CustomEvent;
}
export declare const setPlatformOptions: (opts: SetPlatformOptions) => void;

export type { Components, JSX };

export * from '../types/components';
