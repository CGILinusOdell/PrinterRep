// https://stackoverflow.com/questions/63051941/how-to-pass-data-as-array-of-object-in-stencil-js
// https://medium.com/@scottmgerstl/passing-an-object-or-array-to-stencil-dd62b7d92641
import { Component, Prop, h, State, Listen, Watch, Element, Host, Event, } from '@stencil/core';
// eslint-disable-next-line import/prefer-default-export
export class Table {
  constructor() {
    this.verticalDividers = false;
    this.compactDesign = false;
    this.noMinWidth = false;
    this.whiteBackground = false;
    this.multiSelect = false;
    this.filtering = false;
    this.bodyData = `[
      {
          "truck": "L-series",
          "driver": "Sonya Bruce",
          "country": "Brazil",
          "mileage": 123987
      },
      {
          "truck": "P-series",
          "driver": "Guerra Bowman",
          "country": "Sweden",
          "mileage": 2000852
      },
      {
          "truck": "G-series",
          "driver": "Ferrell Wallace",
          "country": "Germany",
          "mileage": 564
      },
      {
          "truck": "R-series",
          "driver": "Cox Burris",
          "country": "Spain",
          "mileage": 1789357
      },
      {
          "truck": "S-series",
          "driver": "Montgomery Cervantes",
          "country": "Croatia",
          "mileage": 65
      },
      {
          "truck": "L-series",
          "driver": "Sheryl Nielsen",
          "country": "Greece",
          "mileage": 365784
      },
      {
          "truck": "G-series",
          "driver": "Benton Gomez",
          "country": "France",
          "mileage": 80957
      }
  ]`;
    this.innerBodyData = [];
    this.bodyDataManipulated = [];
    this.bodyDataOriginal = [];
    this.bodyRowSelected = false;
    this.multiselectArray = [];
    this.arrayOfKeys = [];
    this.mainCheckboxSelected = false;
    this.disableAllSorting = false;
    // Would  be good to make a check to make sure if header is present,
    // that Number of elements in header is equal to the number of elements in first row of table
    this.countBodyElement = () => {
      let count = 0;
      Object.keys(this.bodyDataManipulated[0]).forEach(() => count++);
    };
    this.compareValues = (key, order = 'asc') => function innerSort(a, b) {
      // eslint-disable-next-line no-prototype-builtins
      if (!a.hasOwnProperty(key) || !b.hasOwnProperty(key)) {
        // property doesn't exist on either object
        return 0;
      }
      const varA = typeof a[key] === 'string' ? a[key].toUpperCase() : a[key];
      const varB = typeof b[key] === 'string' ? b[key].toUpperCase() : b[key];
      let comparison = 0;
      if (varA > varB) {
        comparison = 1;
      }
      else if (varA < varB) {
        comparison = -1;
      }
      return order === 'desc' ? comparison * -1 : comparison;
    };
    /* Lines 148 to 201 - multiSelect feature of table */
    this.selectedDataExporter = (event) => {
      const selectedRows = event.currentTarget
        .closest('.sdds-table')
        .getElementsByClassName('sdds-table__body')[0]
        .getElementsByClassName('sdds-table__row--selected');
      this.multiselectArray = [];
      for (let j = 0; j < selectedRows.length; j++) {
        const rowCells = selectedRows[j].getElementsByTagName('sdds-body-cell');
        const selectedObject = {};
        for (let i = 0; i < rowCells.length; i++) {
          const currentCellKey = rowCells[i].getAttribute('cell-key');
          const currentCellValue = rowCells[i].getAttribute('cell-value');
          selectedObject[currentCellKey] = currentCellValue;
        }
        this.multiselectArray.push(selectedObject);
      }
      this.multiselectArrayJSON = JSON.stringify(this.multiselectArray);
    };
    this.uncheckedAll = () => {
      const headCheckbox = this.tableSelector.querySelector('.sdds-table__header-cell.sdds-table__header-cell--checkbox > .sdds-checkbox-item > .sdds-form-label > .sdds-form-input');
      if (headCheckbox.checked) {
        headCheckbox.checked = false;
      }
      const bodyCheckboxes = this.tableSelector.getElementsByClassName('sdds-table__body')[0].children;
      for (let z = 0; z < bodyCheckboxes.length; z++) {
        const singleCheckbox = bodyCheckboxes[z].getElementsByClassName('sdds-form-input')[0];
        const row = singleCheckbox.closest('tr');
        if (singleCheckbox.checked) {
          singleCheckbox.checked = false;
          row.classList.remove('sdds-table__row--selected');
        }
      }
      this.multiselectArrayJSON = JSON.stringify([]);
    };
    this.headCheckBoxClicked = (event) => {
      this.mainCheckboxSelected = !!event.currentTarget.checked;
      const bodyCheckboxes = event.currentTarget
        .closest('.sdds-table')
        .getElementsByClassName('sdds-table__body')[0].children;
      for (let z = 0; z < bodyCheckboxes.length; z++) {
        const singleCheckbox = bodyCheckboxes[z].getElementsByClassName('sdds-form-input')[0];
        const row = singleCheckbox.closest('tr');
        if (event.currentTarget.checked) {
          singleCheckbox.checked = true;
          row.classList.add('sdds-table__row--selected');
        }
        else {
          singleCheckbox.checked = false;
          row.classList.remove('sdds-table__row--selected');
        }
      }
      this.selectedDataExporter(event);
    };
    this.bodyCheckBoxClicked = (event) => {
      const row = event.currentTarget.closest('tr');
      if (event.currentTarget.checked === true) {
        row.classList.add('sdds-table__row--selected');
      }
      else {
        row.classList.remove('sdds-table__row--selected');
      }
      const tableBodyLevel = event.currentTarget
        .closest('.sdds-table')
        .getElementsByClassName('sdds-table__body')[0];
      const numberOfRows = tableBodyLevel.getElementsByClassName('sdds-table__row').length;
      const numberOfRowsSelected = tableBodyLevel.getElementsByClassName('sdds-table__row--selected').length;
      this.mainCheckboxSelected = numberOfRows === numberOfRowsSelected;
      this.selectedDataExporter(event);
    };
    this.setBodyItem = () => this.bodyDataManipulated.map((row) => (h("tr", { class: "sdds-table__row" },
      this.multiSelect && (h("td", { class: "sdds-table__body-cell sdds-table__body-cell--checkbox" },
        h("div", { class: "sdds-checkbox-item" },
          h("label", { class: "sdds-form-label sdds-form-label--data-table" },
            h("input", { class: "sdds-form-input", type: "checkbox", onChange: (e) => this.bodyCheckBoxClicked(e) }))))),
      Object.keys(row).map((cellData) => (h("sdds-body-cell", { "cell-key": cellData, "cell-value": row[cellData] }))))));
    // Search feat with two search logics
    this.searchFunction = (event) => {
      // grab the value of search and turn to small caps
      const searchTerm = event.currentTarget.value.toLowerCase();
      const sddsTableSearchBar = event.currentTarget.parentElement;
      // grab all rows in body
      const dataRows = event.currentTarget.parentElement.parentElement.parentElement.parentElement
        .getElementsByClassName('sdds-table__body')[0]
        .querySelectorAll('.sdds-table__row');
      // turn it into array
      const dataRowsToArray = [...dataRows];
      dataRowsToArray.map((item) => {
        // every row contains of many cells, find them and turn into array
        const cells = [...item.getElementsByTagName('sdds-body-cell')];
        const cellValuesArray = [];
        // go through cells and save cell-values in array
        cells.map((cellItem) => {
          const cellValue = cellItem.getAttribute('cell-value').toLowerCase();
          cellValuesArray.push(cellValue);
        });
        // iterate over array of values and see if one matches search string
        const matchCounter = cellValuesArray.find((element) => element.includes(searchTerm));
        // if matches, show parent row, otherwise hide the row
        if (matchCounter) {
          item.classList.remove('sdds-table__row--hidden');
        }
        else {
          item.classList.add('sdds-table__row--hidden');
        }
      });
      if (searchTerm.length > 0) {
        sddsTableSearchBar.classList.add('sdds-table__searchbar--active');
        this.disableAllSorting = true;
        this.sortingEnabler.emit(this.disableAllSorting);
      }
      else {
        sddsTableSearchBar.classList.remove('sdds-table__searchbar--active');
        this.disableAllSorting = false;
        this.sortingEnabler.emit(this.disableAllSorting);
      }
      /*
  
      // Logic for filtering JSON data on all columns
      // Really nice solution, do not delete, might be needed in future
      // Reason to go with upper one is not to lose selected state on checkboxes
      if (searchTerm.length > 0) {
        this.bodyDataManipulated = this.bodyDataOriginal.filter((option) =>
          Object.keys(option).some(
            (key) =>
              String(option[key] ?? '')
                .toLowerCase()
                .indexOf(searchTerm) >= 0
          )
        );
      } else {
        this.bodyDataManipulated = this.bodyDataOriginal;
      }
  
        */
    };
  }
  componentWillLoad() {
    this.arrayDataWatcher(this.bodyData);
  }
  arrayDataWatcher(newValue) {
    if (typeof newValue === 'string') {
      this.innerBodyData = JSON.parse(newValue);
    }
    else {
      this.innerBodyData = newValue;
    }
    this.bodyDataManipulated = [...this.innerBodyData];
    this.bodyDataOriginal = [...this.innerBodyData];
    this.arrayOfKeys = Object.keys(this.bodyDataManipulated[0]);
  }
  // Listen to sortColumnData from table-header-element
  updateOptionsContent(event) {
    // Nice usage of array deconstruct
    const [keyValue, sortingDirection] = event.detail;
    this.sortData(keyValue, sortingDirection);
  }
  sortData(keyValue, sortingDirection) {
    // use spread operator to make enable sorting and modifying array, same as using .slice()
    this.bodyDataManipulated = [...this.bodyDataManipulated];
    this.bodyDataManipulated.sort(this.compareValues(keyValue, sortingDirection));
    // Uncheck all checkboxes as state is lost on sorting. Do it only in case multiSelect is True.
    // We will try to find a better approach to solve this one
    if (this.multiSelect) {
      this.uncheckedAll();
    }
  }
  render() {
    return (h(Host, { "selected-rows": this.multiselectArrayJSON },
      h("table", { class: {
          'sdds-table': true,
          'sdds-table--compact': this.compactDesign,
          'sdds-table--divider': this.verticalDividers,
          'sdds-table--no-min-width': this.noMinWidth,
          'sdds-table--on-white-bg': this.whiteBackground,
          'sdds-table--multiselect': this.multiSelect,
        }, ref: (table) => (this.tableSelector = table) },
        (this.tableTitle || this.filtering) && (h("div", { class: "sdds-table__upper-bar" },
          h("div", { class: "sdds-table__upper-bar-flex" },
            h("caption", { class: "sdds-table__title" }, this.tableTitle),
            this.filtering && (h("div", { class: "sdds-table__searchbar" },
              h("input", { class: "sdds-table__searchbar-input", type: "text", onKeyUp: (event) => this.searchFunction(event) }),
              h("span", { class: "sdds-table__searchbar-icon" },
                h("svg", { fill: "none", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32" },
                  h("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M12.942 1.985c-6.051 0-10.957 4.905-10.957 10.957 0 6.051 4.906 10.957 10.957 10.957 2.666 0 5.109-.952 7.008-2.534l8.332 8.331a1 1 0 1 0 1.414-1.414l-8.331-8.331a10.912 10.912 0 0 0 2.534-7.01c0-6.05-4.905-10.956-10.957-10.956ZM3.985 12.942a8.957 8.957 0 1 1 17.914 0 8.957 8.957 0 0 1-17.914 0Z", fill: "currentColor" })))))))),
        h("thead", { class: "sdds-table__header" },
          h("tr", { class: "sdds-table__header-row" },
            this.multiSelect && (h("th", { class: "sdds-table__header-cell sdds-table__header-cell--checkbox" },
              h("div", { class: "sdds-checkbox-item" },
                h("label", { class: "sdds-form-label sdds-form-label--data-table" },
                  h("input", { class: "sdds-form-input", type: "checkbox", onChange: (e) => this.headCheckBoxClicked(e), checked: this.mainCheckboxSelected }))))),
            h("slot", null))),
        h("tbody", { class: "sdds-table__body" }, this.setBodyItem()))));
  }
  static get is() { return "sdds-table"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["table.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["table.css"]
  }; }
  static get properties() { return {
    "tableTitle": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "table-title",
      "reflect": true
    },
    "verticalDividers": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "vertical-dividers",
      "reflect": true,
      "defaultValue": "false"
    },
    "compactDesign": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "compact-design",
      "reflect": true,
      "defaultValue": "false"
    },
    "noMinWidth": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "no-min-width",
      "reflect": true,
      "defaultValue": "false"
    },
    "whiteBackground": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "white-background",
      "reflect": true,
      "defaultValue": "false"
    },
    "multiSelect": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "multi-select",
      "reflect": true,
      "defaultValue": "false"
    },
    "filtering": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "filtering",
      "reflect": true,
      "defaultValue": "false"
    },
    "bodyData": {
      "type": "any",
      "mutable": false,
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "body-data",
      "reflect": false,
      "defaultValue": "`[\n      {\n          \"truck\": \"L-series\",\n          \"driver\": \"Sonya Bruce\",\n          \"country\": \"Brazil\",\n          \"mileage\": 123987\n      },\n      {\n          \"truck\": \"P-series\",\n          \"driver\": \"Guerra Bowman\",\n          \"country\": \"Sweden\",\n          \"mileage\": 2000852\n      },\n      {\n          \"truck\": \"G-series\",\n          \"driver\": \"Ferrell Wallace\",\n          \"country\": \"Germany\",\n          \"mileage\": 564\n      },\n      {\n          \"truck\": \"R-series\",\n          \"driver\": \"Cox Burris\",\n          \"country\": \"Spain\",\n          \"mileage\": 1789357\n      },\n      {\n          \"truck\": \"S-series\",\n          \"driver\": \"Montgomery Cervantes\",\n          \"country\": \"Croatia\",\n          \"mileage\": 65\n      },\n      {\n          \"truck\": \"L-series\",\n          \"driver\": \"Sheryl Nielsen\",\n          \"country\": \"Greece\",\n          \"mileage\": 365784\n      },\n      {\n          \"truck\": \"G-series\",\n          \"driver\": \"Benton Gomez\",\n          \"country\": \"France\",\n          \"mileage\": 80957\n      }\n  ]`"
    }
  }; }
  static get states() { return {
    "innerBodyData": {},
    "bodyDataManipulated": {},
    "bodyDataOriginal": {},
    "bodyRowSelected": {},
    "multiselectArray": {},
    "arrayOfKeys": {},
    "multiselectArrayJSON": {},
    "mainCheckboxSelected": {},
    "tableSelector": {},
    "disableAllSorting": {}
  }; }
  static get events() { return [{
      "method": "sortingEnabler",
      "name": "sortingEnabler",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": ""
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }]; }
  static get elementRef() { return "host"; }
  static get watchers() { return [{
      "propName": "bodyData",
      "methodName": "arrayDataWatcher"
    }]; }
  static get listeners() { return [{
      "name": "sortColumnData",
      "method": "updateOptionsContent",
      "target": undefined,
      "capture": false,
      "passive": false
    }]; }
}
