import { Component, h, Prop, State } from '@stencil/core';
import { createPopper } from '@popperjs/core';
export class Tooltip {
  constructor() {
    this.text = '';
    this.selector = '';
    this.mouseOverTooltip = false;
    this.show = false;
    this.placement = 'bottom';
    this.offsetSkidding = 0;
    this.offsetDistance = 8;
  }
  componentDidLoad() {
    this.target = document.querySelector(this.selector);
    const _this = this;
    createPopper(this.target, this.tooltip, {
      placement: _this.placement,
      modifiers: [
        {
          name: 'positionCalc',
          enabled: true,
          phase: 'main',
          fn({ state }) {
            if (state.placement === 'bottom-start' ||
              state.placement === 'right-start') {
              _this.border = 'top-left';
            }
            else if (state.placement === 'bottom-end' ||
              state.placement === 'left-start') {
              _this.border = 'top-right';
            }
            else if (state.placement === 'top-end' ||
              state.placement === 'left-end') {
              _this.border = 'bottom-right';
            }
            else if (state.placement === 'top-start' ||
              state.placement === 'right-end') {
              _this.border = 'bottom-left';
            }
            else if (state.placement === 'bottom' ||
              state.placement === 'top') {
              _this.border = 'default';
            }
          },
        },
        {
          name: 'offset',
          options: {
            offset: [this.offsetSkidding, this.offsetDistance],
          },
        },
      ],
    });
    const showTooltip = () => {
      this.show = true;
    };
    const hideTooltip = () => {
      this.show = false;
    };
    // For hovering over element with selector
    this.target.addEventListener('mouseenter', () => {
      showTooltip();
    });
    this.target.addEventListener('mouseleave', () => {
      hideTooltip();
    });
    // For hovering over tooltip itself:
    if (this.mouseOverTooltip === true) {
      this.tooltip.addEventListener('mouseenter', () => {
        showTooltip();
      });
      this.tooltip.addEventListener('mouseleave', () => {
        hideTooltip();
      });
    }
  }
  /* Slot on line 118 is added to support adding HTML elements to component */
  render() {
    return (h("span", { ref: (el) => (this.tooltip = el), class: `sdds-tooltip sdds-tooltip-${this.border} ${this.show ? 'sdds-tooltip-show' : ''}` },
      this.text,
      h("slot", null)));
  }
  static get is() { return "sdds-tooltip"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["tooltip.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["tooltip.css"]
  }; }
  static get properties() { return {
    "text": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "text",
      "reflect": false,
      "defaultValue": "''"
    },
    "border": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "border",
      "reflect": false
    },
    "selector": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "selector",
      "reflect": false,
      "defaultValue": "''"
    },
    "mouseOverTooltip": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "mouse-over-tooltip",
      "reflect": false,
      "defaultValue": "false"
    },
    "show": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "show",
      "reflect": false,
      "defaultValue": "false"
    },
    "placement": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "Placement",
        "resolved": "\"auto\" | \"auto-end\" | \"auto-start\" | \"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"",
        "references": {
          "Placement": {
            "location": "import",
            "path": "@popperjs/core"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "placement",
      "reflect": false,
      "defaultValue": "'bottom'"
    },
    "offsetSkidding": {
      "type": "number",
      "mutable": false,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "offset-skidding",
      "reflect": false,
      "defaultValue": "0"
    },
    "offsetDistance": {
      "type": "number",
      "mutable": false,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "offset-distance",
      "reflect": false,
      "defaultValue": "8"
    }
  }; }
  static get states() { return {
    "target": {}
  }; }
}
