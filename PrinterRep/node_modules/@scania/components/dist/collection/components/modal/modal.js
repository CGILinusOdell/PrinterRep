import { Component, h, Listen, Host, Prop, State, Element, Watch, } from '@stencil/core';
export class Modal {
  constructor() {
    // Disable click event on backdrop
    this.prevent = false;
    // Size of the modal
    this.size = 'md';
    // State when modal should be shown
    this.show = false;
  }
  componentDidLoad() {
    const targets = document.querySelectorAll(this.selector);
    this.dismissModal();
    // If the modal doesn't have a selector to be triggered
    if (!targets) {
      console.warn('No prop for modal targeted, please add selector attribute');
      return;
    }
    // Find all buttons with selector (id/class) and add onclick event on it
    targets.forEach((el) => {
      el.addEventListener('click', () => {
        this.show = true;
      });
    });
  }
  dismissModal() {
    const nodes = this.el.querySelectorAll('[data-dismiss-modal]');
    nodes.forEach((el) => {
      el.addEventListener('click', () => {
        this.show = false;
      });
    });
  }
  showToggled() {
    let root = document.querySelector('html');
    if (this.show === true) {
      root.classList.add('sdds-modal-overflow');
    }
    else {
      root.classList.remove('sdds-modal-overflow');
    }
  }
  // Click event on valid targets to dismiss the modal
  handleClick(e) {
    const targetList = e.composedPath();
    const target = targetList[0];
    if (target.classList[0] === 'sdds-modal-btn' ||
      (target.classList[0] === 'sdds-modal-backdrop' && this.prevent === false)) {
      this.show = false;
    }
    e.stopPropagation();
  }
  render() {
    return (h(Host, { class: `sdds-modal-backdrop ${this.show ? 'show' : 'hide'}` },
      h("div", { class: `sdds-modal ${this.size ? `sdds-modal-${this.size}` : ''} ` },
        h("div", { class: "sdds-modal-header" },
          h("slot", { name: "sdds-modal-headline" }),
          h("span", { class: "sdds-modal-btn" })),
        h("slot", { name: "sdds-modal-body" }),
        h("div", { class: "sdds-modal-actions" },
          h("slot", { name: "sdds-modal-actions" })))));
  }
  static get is() { return "sdds-modal"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["modal.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["modal.css"]
  }; }
  static get properties() { return {
    "selector": {
      "type": "any",
      "mutable": false,
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "selector",
      "reflect": false
    },
    "prevent": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "prevent",
      "reflect": false,
      "defaultValue": "false"
    },
    "size": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "size",
      "reflect": false,
      "defaultValue": "'md'"
    }
  }; }
  static get states() { return {
    "show": {}
  }; }
  static get elementRef() { return "el"; }
  static get watchers() { return [{
      "propName": "show",
      "methodName": "showToggled"
    }]; }
  static get listeners() { return [{
      "name": "click",
      "method": "handleClick",
      "target": undefined,
      "capture": false,
      "passive": false
    }]; }
}
