import { Component, h, Prop, State, Element, Listen, Host, Event, Watch, } from '@stencil/core';
export class Dropdown {
  constructor() {
    /** `default`, `multiselect`, `filter`, `nested` */
    this.type = 'default';
    /** `large` (default), `small`, `medium` */
    this.size = 'large';
    /** Set to true to make the width following the label text length */
    this.inline = false;
    /** Position of label: `no-label` (default), `inside`, `outside` */
    this.labelPosition = 'no-label';
    /** Support `error` state */
    this.state = 'default';
    /** Add helper text in the bottom of dropdown */
    this.helper = '';
    this.items = [];
    this.open = false;
    this.selectedLabel = '';
    this.selectedValue = '';
    this.dropdownUniqueClass = '';
    this.openUpwards = false;
    this.dropdownMenuHeight = 0;
  }
  componentWillLoad() {
    // If default option is set, update the default selectedLabel value
    // this.host.children is a HTMLCollection type, cannot use forEach
    this.setOptionFromOutside(this.defaultOption);
  }
  componentDidLoad() {
    // generate UUID for unique event listener
    this.uuid = new Date().getTime() + Math.random();
  }
  setOptionFromOutside(optionValue) {
    if (optionValue) {
      for (let i = 0; i < this.host.children.length; i++) {
        const el = this.host.children[i];
        if (el['value'] === optionValue) {
          this.selectedLabel = el.textContent;
          this.selectedValue = el['value'];
          el.setAttribute('selectedLabel', 'true');
          el.setAttribute('selected', 'true');
        }
        else {
          el.setAttribute('selectedLabel', 'false');
          el.setAttribute('selected', 'false');
        }
      }
    }
  }
  changeSelectedOption() {
    this.setOptionFromOutside(this.selectedOption);
  }
  handleDocClick(ev) {
    // To stop bubble click
    ev.stopPropagation();
    const target = ev ? ev.composedPath()[0] : window.event.target[0];
    if (this.node !== undefined && this.node.contains(target)) {
      if (typeof this.textInput !== 'undefined' || this.textInput === null) {
        this.textInput.focus();
      }
      this.open = !this.open;
    }
    else {
      this.tabbingLabelReset();
      this.open = false;
    }
  }
  handleClick(id) {
    if (id !== this.uuid)
      this.open = false;
    this.dropdownMenuHeight = this.dropdownMenuSelector.offsetHeight;
    const distanceToBottom = this.host.getBoundingClientRect().top;
    const viewportHeight = window.innerHeight;
    this.openUpwards =
      distanceToBottom + this.dropdownMenuHeight + 57 > viewportHeight;
    // If summary of dropdown menu height and its distance to the bottom is more than viewport height, open menu upwards
    // Additional 57px is added as compensation for dropdown element own input/button height
    // It is added on handleClick due to possible dynamic injection of data when component is already rendered
  }
  tabbingLabelReset() {
    if (typeof this.textInput !== 'undefined' || this.textInput === null) {
      if (!this.selectedLabel && this.selectedLabel.length <= 0) {
        this.textInput.value = '';
        this.inputSearch.emit('');
      }
      if (this.selectedLabel !== this.textInput.value) {
        this.textInput.value = this.selectedLabel;
      }
    }
  }
  selectOptionHandler(event) {
    this.selectedLabel = event.detail.label;
    this.selectedValue = event.detail.value;
    this.tabbingLabelReset();
    this.open = false;
  }
  handleSearch(ev) {
    const searchTerm = ev.target.value;
    this.inputSearch.emit(searchTerm);
    this.open = true;
  }
  render() {
    return (h(Host, { class: {
        'sdds-dropdown--open': this.open,
        'sdds-dropdown-inline': this.inline,
        'sdds-dropdown--selected': this.selectedLabel.length > 0,
        'sdds-dropdown--error': this.state === 'error',
        'sdds-dropdown--open-upwards': this.openUpwards,
        'sdds-dropdown--label-inside-position': this.labelPosition === 'inside',
      }, "selected-value": this.selectedValue, "selected-text": this.selectedLabel },
      h("div", { class: `sdds-dropdown sdds-dropdown-${this.size}` },
        this.labelPosition === 'outside' && this.label.length > 0 ? (h("span", { class: "sdds-dropdown-label-outside" }, this.label)) : (''),
        h("button", { class: `sdds-dropdown-toggle ${this.type === 'filter' ? 'is-filter' : ''}`, type: "button", onClick: () => this.handleClick(this.uuid), ref: (node) => (this.node = node) },
          h("div", { class: "sdds-dropdown-label" }, this.type === 'filter' ? (h("input", { ref: (inputEl) => (this.textInput = inputEl), class: "sdds-dropdown-filter", type: "text", placeholder: this.placeholder, value: this.selectedLabel, onInput: (event) => this.handleSearch(event), autoComplete: "off" })) : (h("div", { class: "sdds-dropdown-label-container" },
            this.size !== 'small' &&
              this.labelPosition === 'inside' &&
              this.label.length > 0 && (h("span", { class: "sdds-dropdown-label-inside" }, this.label)),
            h("span", { class: `sdds-dropdown-label-main ${(this.selectedLabel.length === 0 ||
                (this.labelPosition === 'inside' &&
                  this.label.length > 0)) &&
                'sdds-dropdown-placeholder'}` },
              this.selectedLabel.length > 0 && this.selectedLabel,
              !this.selectedLabel &&
                this.labelPosition !== 'inside' &&
                this.placeholder,
              !this.selectedLabel &&
                this.size === 'small' &&
                this.labelPosition === 'inside' &&
                this.placeholder)))),
          h("svg", { class: "sdds-dropdown-arrow", width: "12", height: "7", viewBox: "0 0 12 7", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
            h("path", { d: "M1 1L6 6L11 1", stroke: "currentColor", "stroke-width": "1.25", "stroke-linecap": "round", "stroke-linejoin": "round" }))),
        h("div", { class: "sdds-dropdown-menu", 
          // Need to have reference in order to calc height and distance from bottom
          ref: (dropdownMenu) => (this.dropdownMenuSelector = dropdownMenu) },
          h("slot", null))),
      h("p", { class: "sdds-dropdown-helper" },
        h("svg", { class: "sdds-dropdown-error-icon", fill: "none", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32" },
          h("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M16 4C9.37 4 3.996 9.374 3.996 16.004S9.371 28.007 16 28.007c6.63 0 12.004-5.374 12.004-12.003C28.004 9.374 22.629 4 16 4ZM2 16.004c0-7.732 6.268-14 14-14s14 6.268 14 14-6.268 14-14 14-14-6.268-14-14Z", fill: "currentColor" }),
          h("path", { d: "M14.803 14.47V10h2.376v4.47l-.352 4.295h-1.672l-.352-4.295Zm-.053 5.632h2.5v2.394h-2.5v-2.394Z", fill: "currentColor" })),
        h("span", null, this.helper))));
  }
  static get is() { return "sdds-dropdown"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["dropdown.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["dropdown.css"]
  }; }
  static get properties() { return {
    "placeholder": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Placeholder text for dropdown with no selectedLabel item"
      },
      "attribute": "placeholder",
      "reflect": false
    },
    "defaultOption": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Add the value of the option as string to set it as default"
      },
      "attribute": "default-option",
      "reflect": false
    },
    "selectedOption": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Add the value of the option as string to set it as new selected value"
      },
      "attribute": "selected-option",
      "reflect": false
    },
    "disabled": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Add the value of the option to set it as default"
      },
      "attribute": "disabled",
      "reflect": false
    },
    "type": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "`default`, `multiselect`, `filter`, `nested`"
      },
      "attribute": "type",
      "reflect": false,
      "defaultValue": "'default'"
    },
    "size": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "`large` (default), `small`, `medium`"
      },
      "attribute": "size",
      "reflect": false,
      "defaultValue": "'large'"
    },
    "inline": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Set to true to make the width following the label text length"
      },
      "attribute": "inline",
      "reflect": false,
      "defaultValue": "false"
    },
    "labelPosition": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Position of label: `no-label` (default), `inside`, `outside`"
      },
      "attribute": "label-position",
      "reflect": false,
      "defaultValue": "'no-label'"
    },
    "label": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Label text for label inside & outside"
      },
      "attribute": "label",
      "reflect": false
    },
    "state": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Support `error` state"
      },
      "attribute": "state",
      "reflect": false,
      "defaultValue": "'default'"
    },
    "helper": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Add helper text in the bottom of dropdown"
      },
      "attribute": "helper",
      "reflect": false,
      "defaultValue": "''"
    }
  }; }
  static get states() { return {
    "items": {},
    "open": {},
    "node": {},
    "selectedLabel": {},
    "selectedValue": {},
    "uuid": {},
    "dropdownUniqueClass": {},
    "openUpwards": {},
    "dropdownMenuHeight": {},
    "dropdownMenuSelector": {}
  }; }
  static get events() { return [{
      "method": "inputSearch",
      "name": "inputSearch",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": ""
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }]; }
  static get elementRef() { return "host"; }
  static get watchers() { return [{
      "propName": "selectedOption",
      "methodName": "changeSelectedOption"
    }]; }
  static get listeners() { return [{
      "name": "click",
      "method": "handleDocClick",
      "target": "document",
      "capture": false,
      "passive": false
    }, {
      "name": "selectOption",
      "method": "selectOptionHandler",
      "target": undefined,
      "capture": false,
      "passive": false
    }]; }
}
