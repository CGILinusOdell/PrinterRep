import { Component, h, Prop, State, Element, Host, Event, Listen, } from '@stencil/core';
export class DropdownOption {
  constructor() {
    /** Selected set to true if selected */
    this.selected = false;
  }
  onKeyDown(event) {
    if (event.code === 'Enter') {
      this.selectOptionHandler({
        value: this.value,
        label: this.host.innerText,
        parent: this.host.parentNode,
      });
    }
  }
  componentWillLoad() {
    this.innerValue = this.value;
  }
  selectOptionHandler(value) {
    const listOptions = value.parent.childNodes;
    this.selectOption.emit(value);
    listOptions.forEach((optionEl) => {
      optionEl.selected = false;
    });
    this.selected = true;
  }
  render() {
    return (h(Host, { onClick: (ev) => this.selectOptionHandler({
        value: this.value,
        label: this.host.innerText,
        parent: ev.target.parentNode,
      }), class: {
        selected: this.selected,
      }, tabindex: "0" },
      h("span", { class: "sdds-option-label" },
        h("slot", null)),
      h("span", { class: "sdds-option-checkmark" },
        h("svg", { width: "10", height: "7", viewBox: "0 0 10 7", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
          h("path", { d: "M1 3L4 6L9 1", stroke: "currentColor", "stroke-width": "1.25", "stroke-linecap": "round", "stroke-linejoin": "round" })))));
  }
  static get is() { return "sdds-dropdown-option"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["dropdown.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["dropdown.css"]
  }; }
  static get properties() { return {
    "selected": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Selected set to true if selected"
      },
      "attribute": "selected",
      "reflect": false,
      "defaultValue": "false"
    },
    "value": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Value is a unique string that will be used for application logic"
      },
      "attribute": "value",
      "reflect": true
    }
  }; }
  static get states() { return {
    "innerValue": {}
  }; }
  static get events() { return [{
      "method": "selectOption",
      "name": "selectOption",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": ""
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }]; }
  static get elementRef() { return "host"; }
  static get listeners() { return [{
      "name": "keydown",
      "method": "onKeyDown",
      "target": undefined,
      "capture": false,
      "passive": false
    }]; }
}
