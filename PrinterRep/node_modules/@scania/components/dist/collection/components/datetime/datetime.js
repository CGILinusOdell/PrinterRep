import { Component, State, h, Prop, Listen, Event, } from '@stencil/core';
export class Datetime {
  constructor() {
    /** Which input type, text, password or similar */
    this.type = 'text';
    /** Value of the input text */
    this.value = '';
    /** Set input in disabled state */
    this.disabled = false;
    /** Size of the input */
    this.size = '';
    /** With setting */
    this.nominwidth = false;
    /** Name property */
    this.name = '';
    /** Autofocus for input */
    this.autofocus = false;
  }
  // Listener if input enters focus state
  handleFocusIn() {
    this.focusInput = true;
  }
  // Listener if input leaves focus state
  handleFocusOut() {
    this.focusInput = false;
  }
  // Data input event in value prop
  handleInput(e) {
    this.value = e.target.value;
  }
  // Change event isn't a composed:true by default in for input
  handleChange(e) {
    this.customChange.emit(e);
  }
  /** Set the input as focus when clicking the whole datetime with suffix/prefix */
  handleFocusClick() {
    this.textInput.focus();
  }
  render() {
    let className = ' sdds-datetime-input';
    if (this.size === 'md') {
      className += className + '-md';
    }
    if (this.size === 'sm') {
      className += className + '-sm';
    }
    return (h("div", { class: `
        ${this.nominwidth ? 'sdds-form-datetime-nomin' : ''}
        ${this.focusInput
        ? 'sdds-form-datetime sdds-datetime-focus'
        : ' sdds-form-datetime'}
        ${this.value.length > 0 ? 'sdds-datetime-data' : ''}
        ${this.disabled ? 'sdds-form-datetime-disabled' : ''}
        ${this.size == 'md' ? 'sdds-form-datetime-md' : ''}
        ${this.size == 'sm' ? 'sdds-form-datetime-sm' : ''}
        ${this.state == 'error' || this.state == 'success'
        ? `sdds-form-datetime-${this.state}`
        : ''}
        ` },
      h("slot", { name: "sdds-label" }),
      h("div", { onClick: () => this.handleFocusClick(), class: "sdds-datetime-container sdds-datetime-container" },
        h("div", { class: "sdds-datetime-input-container" },
          h("input", { ref: (inputEl) => (this.textInput = inputEl), class: className, type: this.type, disabled: this.disabled, value: this.value, autofocus: this.autofocus, name: this.name, onInput: (e) => this.handleInput(e), onChange: (e) => this.handleChange(e) }),
          h("div", { class: "datetime-icon icon-datetime-local" },
            h("svg", { fill: "none", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32" },
              h("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M23.625 2.977a1 1 0 1 0-2 0v2.985l-11.344.01V2.99a1 1 0 1 0-2 0v2.985H6.25a4.2 4.2 0 0 0-4.2 4.2V25.77a4.2 4.2 0 0 0 4.2 4.2h19.54a4.2 4.2 0 0 0 4.2-4.2V10.167a4.2 4.2 0 0 0-4.191-4.2l-2.174-.004V2.977ZM4.05 10.174a2.2 2.2 0 0 1 2.2-2.2l16.376-.013 3.17.006a2.2 2.2 0 0 1 2.195 2.2v1.847H4.05l-.001-1.84Zm0 3.84V25.77a2.2 2.2 0 0 0 2.2 2.2h19.54a2.2 2.2 0 0 0 2.2-2.2V14.014H4.05Z", fill: "currentColor" }))),
          h("div", { class: "datetime-icon icon-time" },
            h("svg", { fill: "none", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32" },
              h("path", { d: "M17 7a1 1 0 1 0-2 0v8a2 2 0 0 0 2 2h6a1 1 0 1 0 0-2h-6V7Z", fill: "currentColor" }),
              h("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M16 2C8.268 2 2 8.268 2 16s6.268 14 14 14 14-6.268 14-14S23.732 2 16 2ZM4 16C4 9.373 9.373 4 16 4s12 5.373 12 12-5.373 12-12 12S4 22.627 4 16Z", fill: "currentColor" })))),
        h("div", { class: "sdds-datetime-bar" })),
      h("div", { class: "sdds-datetime-helper" },
        h("slot", { name: "sdds-helper" }))));
  }
  static get is() { return "sdds-datetime"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["datetime.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["datetime.css"]
  }; }
  static get properties() { return {
    "type": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Which input type, text, password or similar"
      },
      "attribute": "type",
      "reflect": true,
      "defaultValue": "'text'"
    },
    "value": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Value of the input text"
      },
      "attribute": "value",
      "reflect": true,
      "defaultValue": "''"
    },
    "disabled": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Set input in disabled state"
      },
      "attribute": "disabled",
      "reflect": false,
      "defaultValue": "false"
    },
    "size": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Size of the input"
      },
      "attribute": "size",
      "reflect": false,
      "defaultValue": "''"
    },
    "nominwidth": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "With setting"
      },
      "attribute": "nominwidth",
      "reflect": false,
      "defaultValue": "false"
    },
    "name": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Name property"
      },
      "attribute": "name",
      "reflect": false,
      "defaultValue": "''"
    },
    "state": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Error state of input"
      },
      "attribute": "state",
      "reflect": false
    },
    "autofocus": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Autofocus for input"
      },
      "attribute": "autofocus",
      "reflect": false,
      "defaultValue": "false"
    }
  }; }
  static get states() { return {
    "focusInput": {}
  }; }
  static get events() { return [{
      "method": "customChange",
      "name": "customChange",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Change event for the datetime"
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }]; }
  static get listeners() { return [{
      "name": "focus",
      "method": "handleFocusIn",
      "target": undefined,
      "capture": false,
      "passive": false
    }, {
      "name": "focusout",
      "method": "handleFocusOut",
      "target": undefined,
      "capture": false,
      "passive": false
    }]; }
}
