import { Component, h, State, Listen, Prop, Watch } from '@stencil/core';
export class Slider {
  constructor() {
    this.min = '0';
    this.max = '100';
    this.value = '20';
    this.valueTwo = '70';
    this.minDiffValue = 0;
    this.rangeStyle = {
      '--min': this.min,
      '--max': this.max,
      '--val': this.value,
    };
    this.secondRangeStyle = {
      '--min': this.min,
      '--max': this.max,
      '--val': this.valueTwo,
    };
    this.handleOnChangeLeft = (event) => {
      this.onInputTextChange(event.target.value, this.leftInputTextRef, true);
    };
    this.handleOnChangeRight = (event) => {
      this.onInputTextChange(event.target.value, this.rightInputTextRef, false);
    };
  }
  watchValue() {
    if (this.value > this.max || this.value < this.min) {
      // console.warn('The provided value should be between min and max');
      this.rangeStyle = Object.assign(Object.assign({}, this.rangeStyle), { '--val': this.min });
    }
  }
  watchValueTwo() {
    if (this.valueTwo > this.max || this.valueTwo < this.value) {
      /*      console.warn(
        'The provided value should be greater than value and less than max'
      ); */
      this.secondRangeStyle = Object.assign(Object.assign({}, this.secondRangeStyle), { '--val': this.max });
    }
  }
  componentWillLoad() {
    this.watchValue();
    this.watchValueTwo();
  }
  onInputTextChange(newValue, elemnetRef, leftInput) {
    if (parseInt(newValue) >= parseInt(this.rangeStyle['--min']) &&
      parseInt(newValue) <= parseInt(this.rangeStyle['--max'])) {
      elemnetRef.classList.remove('input-text-error');
      leftInput
        ? this.updateValue(newValue, this.rightRangeInputEl.valueAsNumber, elemnetRef)
        : this.updateValue(this.leftRangeInputEl.valueAsNumber, newValue, elemnetRef);
    }
    else {
      elemnetRef.classList.add('input-text-error');
    }
  }
  handleChange() {
    var _a;
    this.updateValue(this.leftRangeInputEl.valueAsNumber, (_a = this.rightRangeInputEl) === null || _a === void 0 ? void 0 : _a.valueAsNumber);
  }
  updateValue(value, value2, elemnetRef) {
    if (this.type === 'basic') {
      this.leftRangeInputEl.value = value.toString();
      this.rangeStyle = Object.assign(Object.assign({}, this.rangeStyle), { '--val': value.toString() });
    }
    else if (this.type === 'continuousValue') {
      const newValue = Number(((value - parseInt(this.rangeStyle['--min'])) * 100) /
        (parseInt(this.rangeStyle['--max']) -
          parseInt(this.rangeStyle['--min'])));
      const newPosition = 16 - newValue * 0.47;
      this.spantext.innerHTML = value.toString();
      this.sliderspan.style.left = `calc(${newValue}% + (${newPosition}px))`;
      this.leftRangeInputEl.value = value.toString();
      this.rangeStyle = Object.assign(Object.assign({}, this.rangeStyle), { '--val': value.toString() });
    }
    else if (this.type === 'dualPoint') {
      elemnetRef === null || elemnetRef === void 0 ? void 0 : elemnetRef.classList.remove('input-text-error');
      if (value2 - value >= this.minDiffValue) {
        elemnetRef === null || elemnetRef === void 0 ? void 0 : elemnetRef.classList.remove('input-text-error');
        this.leftRangeInputEl.value = value.toString(); // update the left input incase change ot not
        this.rightRangeInputEl.value = value2.toString(); // update the right input incase change ot not
        this.rangeStyle = Object.assign(Object.assign({}, this.rangeStyle), { '--val': value.toString() }); // update left range incase change ot not
        this.secondRangeStyle = Object.assign(Object.assign({}, this.secondRangeStyle), { '--val': value2.toString() }); // update right range incase change ot not
        this.leftRangeOldValue = value.toString(); // save old value for fallback
        this.rightRangeOldValue = value2.toString(); // save old value for fallback
      }
      else {
        // Keep the value as pervious
        this.leftRangeInputEl.value = this.leftRangeOldValue;
        this.rightRangeInputEl.value = this.rightRangeOldValue;
        this.rangeStyle = Object.assign(Object.assign({}, this.rangeStyle), { '--val': this.leftRangeOldValue });
        this.secondRangeStyle = Object.assign(Object.assign({}, this.secondRangeStyle), { '--val': this.rightRangeOldValue });
        elemnetRef === null || elemnetRef === void 0 ? void 0 : elemnetRef.classList.add('input-text-error');
      }
    }
  }
  inputBasic() {
    return (h("div", { style: this.rangeStyle, class: "container" },
      h("input", { style: { position: 'relative' }, value: `${this.rangeStyle['--val']}`, min: `${this.rangeStyle['--min']}`, max: `${this.rangeStyle['--max']}`, ref: (el) => (this.leftRangeInputEl = el), type: "range" })));
  }
  inputContinuous() {
    return (h("div", null,
      h("div", { style: this.rangeStyle, class: "container" },
        h("sdds-continousvalue-slider", null))));
  }
  dualPoint() {
    return (h("div", { class: "container" },
      h("input", { min: `${this.rangeStyle['--min']}`, max: `${this.rangeStyle['--max']}`, value: `${this.rangeStyle['--val']}`, type: "text", ref: (el) => (this.leftInputTextRef = el), class: "input-text", onKeyUp: (ev) => this.handleOnChangeLeft(ev) }),
      h("div", { class: "range-slider", style: {
          '--minval': `${this.rangeStyle['--val']}`,
          '--maxval': `${this.secondRangeStyle['--val']}`,
        } },
        h("input", { min: `${this.rangeStyle['--min']}`, max: `${this.rangeStyle['--max']}`, value: `${this.rangeStyle['--val']}`, type: "range", class: "sliders", style: this.rangeStyle, ref: (el) => (this.leftRangeInputEl = el) }),
        h("input", { min: `${this.secondRangeStyle['--min']}`, max: `${this.secondRangeStyle['--max']}`, value: `${this.secondRangeStyle['--val']}`, type: "range", class: "sliders sliders-right", ref: (el) => (this.rightRangeInputEl = el), style: this.secondRangeStyle })),
      h("input", { min: `${this.secondRangeStyle['--min']}`, max: `${this.secondRangeStyle['--max']}`, type: "text", value: `${this.secondRangeStyle['--val']}`, ref: (el) => (this.rightInputTextRef = el), class: "input-text", onKeyUp: (ev) => this.handleOnChangeRight(ev) })));
  }
  render() {
    return (h("div", null,
      this.type === 'basic' && this.inputBasic(),
      this.type === 'continuousValue' && this.inputContinuous(),
      this.type === 'dualPoint' && this.dualPoint()));
  }
  static get is() { return "sdds-slider"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["slider.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["slider.css"]
  }; }
  static get properties() { return {
    "type": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "type",
      "reflect": false
    },
    "min": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "min",
      "reflect": false,
      "defaultValue": "'0'"
    },
    "max": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "max",
      "reflect": false,
      "defaultValue": "'100'"
    },
    "value": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "value",
      "reflect": false,
      "defaultValue": "'20'"
    },
    "valueTwo": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "value-two",
      "reflect": false,
      "defaultValue": "'70'"
    }
  }; }
  static get states() { return {
    "leftRangeOldValue": {},
    "rightRangeOldValue": {},
    "minDiffValue": {},
    "rangeStyle": {},
    "secondRangeStyle": {}
  }; }
  static get watchers() { return [{
      "propName": "value",
      "methodName": "watchValue"
    }, {
      "propName": "valueTwo",
      "methodName": "watchValueTwo"
    }]; }
  static get listeners() { return [{
      "name": "input",
      "method": "handleChange",
      "target": undefined,
      "capture": false,
      "passive": false
    }]; }
}
