import { Component, h, Prop, State, Listen, Watch } from '@stencil/core';
export class ContinousValueSlider {
  constructor() {
    /** Minmum value of input */
    this.min = '0';
    /** Maximum value of input */
    this.max = '100';
    /** value of input */
    this.value = '20';
    this.rangeProp = {
      '--min': this.min,
      '--max': this.max,
      '--val': this.value,
    };
    // Handle when plus button clicked
    this.onPlusClicked = () => {
      parseInt(this.rangeProp['--val']) < parseInt(this.rangeProp['--max'])
        ? this.updateSlider(this.inputRange.valueAsNumber + 1)
        : '';
    };
    // Handle when minus button clicked
    this.onMinusClicked = () => {
      parseInt(this.rangeProp['--val']) > parseInt(this.rangeProp['--min'])
        ? this.updateSlider(this.inputRange.valueAsNumber - 1)
        : '';
    };
  }
  // Validate the max, min, value
  watchValue() {
    if (this.value > this.max || this.value < this.min) {
      //console.warn('The provided value should be between min and max');
      this.rangeProp = Object.assign(Object.assign({}, this.rangeProp), { '--val': this.min });
    }
  }
  componentWillLoad() {
    this.watchValue();
  }
  // Update the spanText and input range
  updateSlider(value) {
    // To get the slider value in px
    const newValue = Number(((value - parseInt(this.rangeProp['--min'])) * 100) /
      (parseInt(this.rangeProp['--max']) - parseInt(this.rangeProp['--min'])));
    // 38 --> Refer to size of minus button and margin-left
    // 0.76 -->Refer to size of minus and plus button and margin left and right to them.
    const newPosition = 38 - newValue * 0.76;
    this.spantext.innerHTML = `<span>${value}</span>`;
    this.spantext.style.left = `calc(${newValue}% + (${newPosition}px))`;
    //Update the input range value
    this.inputRange.value = value.toString();
    this.rangeProp = Object.assign(Object.assign({}, this.rangeProp), { '--val': value.toString() });
  }
  // Listen the input change
  handleChange() {
    this.updateSlider(this.inputRange.valueAsNumber);
  }
  render() {
    return (h("div", { style: this.rangeProp, class: "container container--continuous" },
      h("div", { class: "rangevalue", ref: (el) => (this.spantext = el) },
        h("span", null, this.rangeProp['--val'])),
      h("button", { onClick: this.onMinusClicked, class: "minus" }),
      h("input", { min: `${this.rangeProp['--min']}`, max: `${this.rangeProp['--max']}`, value: `${this.rangeProp['--val']}`, ref: (el) => (this.inputRange = el), type: "range" }),
      h("button", { onClick: this.onPlusClicked, class: "plus" })));
  }
  static get is() { return "sdds-continousvalue-slider"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["slider.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["slider.css"]
  }; }
  static get properties() { return {
    "min": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Minmum value of input"
      },
      "attribute": "min",
      "reflect": false,
      "defaultValue": "'0'"
    },
    "max": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Maximum value of input"
      },
      "attribute": "max",
      "reflect": false,
      "defaultValue": "'100'"
    },
    "value": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "value of input"
      },
      "attribute": "value",
      "reflect": false,
      "defaultValue": "'20'"
    }
  }; }
  static get states() { return {
    "rangeProp": {}
  }; }
  static get watchers() { return [{
      "propName": "value",
      "methodName": "watchValue"
    }]; }
  static get listeners() { return [{
      "name": "input",
      "method": "handleChange",
      "target": undefined,
      "capture": false,
      "passive": false
    }]; }
}
