import { Component, h, Prop, State, Watch, Listen } from '@stencil/core';
export class DualPointSlider {
  constructor() {
    /** Minmum value of input */
    this.min = '0';
    /** Maximum value of input */
    this.max = '100';
    /** value of range one */
    this.value = '20';
    /** value of range two*/
    this.value2 = '70';
    this.rangeProp = {
      '--min': this.min,
      '--max': this.max,
      '--val': this.value,
    };
    this.rangeProp2 = {
      '--min': this.min,
      '--max': this.max,
      '--val': this.value2,
    };
    // Minmum difference bewtten the thumb of two slider
    this.minDiffValue = 0;
    this.OnLeftTextChange = (event) => {
      this.onInputTextChange(event.target.value, this.inputTextLeft, true);
    };
    this.OnRightTextChange = (event) => {
      this.onInputTextChange(event.target.value, this.inputTextRight, false);
    };
  }
  watchValue() {
    if (this.value > this.max || this.value < this.min) {
      //console.warn('The provided value should be between min and max');
      this.rangeProp = Object.assign(Object.assign({}, this.rangeProp), { '--val': this.min });
    }
  }
  watchValue2() {
    if (this.value2 > this.max || this.value2 < this.value) {
      /*      console.warn(
        'The provided value should be greater than value and less than max'
      ); */
      this.rangeProp2 = Object.assign(Object.assign({}, this.rangeProp2), { '--val': this.max });
    }
  }
  componentWillLoad() {
    this.watchValue();
    this.watchValue2();
  }
  onInputTextChange(newValue, elemnetRef, leftInput) {
    var _a, _b;
    if (parseInt(newValue) >= parseInt(this.rangeProp['--min']) &&
      parseInt(newValue) <= parseInt(this.rangeProp['--max'])) {
      elemnetRef.classList.remove('input-text-error');
      leftInput
        ? this.updateSlider(newValue, (_a = this.inputRangeRight) === null || _a === void 0 ? void 0 : _a.valueAsNumber, elemnetRef)
        : this.updateSlider((_b = this.inputRangeLeft) === null || _b === void 0 ? void 0 : _b.valueAsNumber, newValue, elemnetRef);
    }
    else {
      elemnetRef.classList.add('input-text-error');
    }
  }
  updateSlider(value, value2, elemnetRef) {
    elemnetRef === null || elemnetRef === void 0 ? void 0 : elemnetRef.classList.remove('input-text-error');
    if (value2 - value >= this.minDiffValue) {
      elemnetRef === null || elemnetRef === void 0 ? void 0 : elemnetRef.classList.remove('input-text-error');
      this.inputRangeLeft.value = value.toString(); // update the left input incase change or not
      this.inputRangeRight.value = value2.toString(); // update the right input incase change or not
      this.rangeProp = Object.assign(Object.assign({}, this.rangeProp), { '--val': value.toString() }); // update left range incase change or not
      this.rangeProp2 = Object.assign(Object.assign({}, this.rangeProp2), { '--val': value2.toString() }); // update right range incase change or not
      this.leftRangeOldValue = value.toString(); // save old value for fallback
      this.rightRangeOldValue = value2.toString(); // save old value for fallback
    }
    else {
      // Keep the value as pervious
      this.inputRangeLeft.value = this.leftRangeOldValue;
      this.inputRangeRight.value = this.rightRangeOldValue;
      this.rangeProp = Object.assign(Object.assign({}, this.rangeProp), { '--val': this.leftRangeOldValue });
      this.rangeProp2 = Object.assign(Object.assign({}, this.rangeProp2), { '--val': this.rightRangeOldValue });
      elemnetRef === null || elemnetRef === void 0 ? void 0 : elemnetRef.classList.add('input-text-error');
    }
  }
  handleChange() {
    var _a, _b;
    this.updateSlider((_a = this.inputRangeLeft) === null || _a === void 0 ? void 0 : _a.valueAsNumber, (_b = this.inputRangeRight) === null || _b === void 0 ? void 0 : _b.valueAsNumber);
  }
  render() {
    return (h("div", { class: "container" },
      h("input", { min: `${this.rangeProp['--min']}`, max: `${this.rangeProp['--max']}`, value: `${this.rangeProp['--val']}`, type: "text", ref: (el) => (this.inputTextLeft = el), class: "input-text", onKeyUp: (ev) => this.OnLeftTextChange(ev) }),
      h("div", { class: "range-slider", style: {
          '--minval': `${this.rangeProp['--val']}`,
          '--maxval': `${this.rangeProp2['--val']}`,
        } },
        h("input", { min: `${this.rangeProp['--min']}`, max: `${this.rangeProp['--max']}`, value: `${this.rangeProp['--val']}`, type: "range", class: "sliders", style: this.rangeProp, ref: (el) => (this.inputRangeLeft = el) }),
        h("input", { min: `${this.rangeProp2['--min']}`, max: `${this.rangeProp2['--max']}`, value: `${this.rangeProp2['--val']}`, type: "range", class: "sliders sliders-right", ref: (el) => (this.inputRangeRight = el), style: this.rangeProp2 })),
      h("input", { min: `${this.rangeProp2['--min']}`, max: `${this.rangeProp2['--max']}`, type: "text", value: `${this.rangeProp2['--val']}`, ref: (el) => (this.inputTextRight = el), class: "input-text", onKeyUp: (ev) => this.OnRightTextChange(ev) })));
  }
  static get is() { return "sdds-dual-point-slider"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["slider.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["slider.css"]
  }; }
  static get properties() { return {
    "min": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Minmum value of input"
      },
      "attribute": "min",
      "reflect": false,
      "defaultValue": "'0'"
    },
    "max": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Maximum value of input"
      },
      "attribute": "max",
      "reflect": false,
      "defaultValue": "'100'"
    },
    "value": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "value of range one"
      },
      "attribute": "value",
      "reflect": false,
      "defaultValue": "'20'"
    },
    "value2": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "value of range two"
      },
      "attribute": "value-2",
      "reflect": false,
      "defaultValue": "'70'"
    }
  }; }
  static get states() { return {
    "rangeProp": {},
    "rangeProp2": {},
    "minDiffValue": {},
    "leftRangeOldValue": {},
    "rightRangeOldValue": {}
  }; }
  static get watchers() { return [{
      "propName": "value",
      "methodName": "watchValue"
    }, {
      "propName": "value2",
      "methodName": "watchValue2"
    }]; }
  static get listeners() { return [{
      "name": "input",
      "method": "handleChange",
      "target": undefined,
      "capture": false,
      "passive": false
    }]; }
}
